#include <bits/stdc++.h>
typedef long long int ll;
using namespace std;
const int N = 1e5 + 10;
bool vis_dfs[N];
bool vis_bfs[N];
vector<int> g[N];

void bfs(queue<int> &q)
{
    if (q.empty())
    {
        return;
    }
    int u = q.front();
    q.pop();
    // if (vis_bfs[u])
    // {
    //     return;
    // }

    // vis_bfs[u] = true;
    cout << u << endl;
    // for (int i = 0; i < g[u].size(); i++)
    // {
    //     if (!vis_bfs[g[u][i]])
    //     {
    //         q.push(g[u][i]);
    //     }
    // }
    for (int child : g[u])
    {
        if (!vis_bfs[child])
        {
            q.push(child);
            vis_bfs[child] = true;
            continue;
        }
        // take action on child before entering child node
        // dfs(child);
        // cout<<"hello"<<endl;
        // take action on child after exiting child node
    }
    bfs(q);
}

void dfs(int vertex)
{
    // take action on vertex after entering vertex
    //  if(vis_dfs[child]) return ;  //you can use this also
    cout << vertex << endl;
    vis_dfs[vertex] = 1;
    for (int child : g[vertex])
    {
        if (vis_dfs[child])
            continue;
        // take action on child before entering child node
        dfs(child);
        // take action on child after exiting child node
    }
    // take action on vertex after entering vertex
}
signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; i++)
    {
        ll v1, v2;
        cin >> v1 >> v2;
        g[v1].push_back(v2);
        g[v2].push_back(v1);
    }
    queue<int> q;
    q.push(1);
    vis_bfs[1] = true;
    cout << "bfs" << endl;
    bfs(q);
    cout << endl;
    cout << "dfs" << endl;
    dfs(1);
    // your code goes here
    return 0;
}




// asign 3 - dijkstra's algo

#include <bits/stdc++.h>

using namespace std;

void printParent(int i, vector<int> &parent)
{
    if (parent[i] == i)
    {
        cout << i << " ";
        return;
    }
    printParent(parent[i], parent);
    cout << i << " ";
    // cout<<endl;
}

int main()
{
    cout << "Enter no of vertices : ";
    int v;
    cin >> v;
    cout << "Enter no of edges : ";
    int e;
    cin >> e;
    vector<pair<int, int>> adj[v + 1];
    for (int i = 0; i < e; i++)
    {
        int u, v, x;
        cout << "Enter source : ";
        cin >> u;
        cout << "Enter destination : ";
        cin >> v;
        cout << "Enter weight : ";
        cin >> x;
        adj[u].push_back({v, x});
        adj[v].push_back({u, x});
    }
    vector<int> parent(v + 1);
    for (int i = 1; i <= v; i++)
    {
        parent[i] = i;
    }
    // priority_queue<int, vector<int>, greater<>> p;
    priority_queue<int, vector<int>, greater<>> pq;
    vector<int> dist(v + 1, INT_MAX);
    dist[1] = 0;
    pq.push(1);

    while (!pq.empty())
    {
        int node = pq.top();
        pq.pop();
        for (auto it : adj[node])
        {
            int child = it.first;
            int childDist = it.second;
            if (dist[child] > dist[node] + childDist)
            {
                dist[child] = dist[node] + childDist;
                pq.push(child);
                parent[child] = node;
            }
        }
    }

    for (int i = 1; i <= v; i++)
    {
        cout << "Path of " << i << "th node is : ";
        printParent(i, parent);
        cout << endl;
    }

    return 0;
}

// //CSP - n queens

// #include <bits/stdc++.h>

// using namespace std;

// vector<vector<string>> ans;

// void recur(int col, int n, vector<int> &row, vector<int> &left, vector<int> &right, vector<string> &path){
//     //base condition
//     if(col==n){
//         //reached at end column- has all paths
//         ans.push_back(path);
//         return;
//     }
//     //logic
//     for(int i=0; i<n; i++){
//         if(!row[i] && !left[col+i] && !right[n-1+col-i]){
//             row[i]=1;
//             left[col+i]=1;
//             right[n-1+col-i]=1;
//             path[i][col]='Q';

//             recur(col+1, n, row, left, right, path);

//             path[i][col]='.';
//             right[n-1+col-i]=0;
//             left[col+i]=0;
//             row[i]=0;
//         }
//     }
// }

// vector<vector<string>> solveQueens(int n){
//     vector<string> path(n);
//     string s(n, '.');
//     for(int i=0; i<n; i++){
//         path[i]=s;
//     }
//     vector<int> row(n);
//     vector<int> left(2*n-1);
//     vector<int> right(2*n-1);
//     recur(0, n, row, left, right, path);
//     return ans;
// }

// int main(){
//     cout<<"Enter the n (to create n*n matrix) : ";
//     int n;
//     cin>>n;
//     vector<vector<string>> result;
//     result=solveQueens(n);
//     for(int i=0; i<n; i++){
//         for(int j=0; j<n; j++){
//             cout<<result[i][j]<<endl;
//         }
//         cout<<endl;
//     }
//     return 0;
// }

#include <bits/stdc++.h>
using namespace std;

void addSol(vector<vector<int>> &ans, vector<vector<int>> &board, int n)
{
	for (int i = 0; i < n; i++)
	{
		vector<int> temp;
		for (int j = 0; j < n; j++)
		{
			temp.push_back(board[i][j]);
		}

		// ans.push_back(temp);
		ans.push_back(temp);
	}
}
bool issafe(int row, int col, vector<vector<int>> &board, int n)
{
	int x = row;
	int y = col;
	while (y >= 0)
	{
		if (board[x][y] == 1)
		{
			return false;
		}
		y--;
	}
	x = row;
	y = col;
	while (y >= 0 && x >= 0)
	{
		if (board[x][y] == 1)
		{
			return false;
		}
		y--;
		x--;
	}
	x = row;
	y = col;
	while (y >= 0 && x < n)
	{
		if (board[x][y] == 1)
		{
			return false;
		}
		y--;
		x++;
	}
	// cout<<"hello"<<endl;
	return true;
}
void solve(int col, vector<vector<int>> &ans, vector<vector<int>> &board, int n)
{
	if (col == n)
	{
		addSol(ans, board, n);
		return;
	}

	for (int row = 0; row < n; row++)
	{
		if (issafe(row, col, board, n))
		{
			board[row][col] = 1;
			solve(col + 1, ans, board, n);
			board[row][col] = 0;
		}
	}
}
vector<vector<int>> nQueens(int n)
{
	vector<vector<int>> board(n, vector<int>(n, 0));
	vector<vector<int>> ans;
	// cout<<"hello"<<endl;
	solve(0, ans, board, n);
	// cout<<"hello"<<endl;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			// temp.push_back(board[i][j]);
			cout << ans[i][j] << " ";
		}
		cout << endl;

		// ans.push_back(temp);
	}
	return ans;

	// Write your code here
}
int main()
{
	// cout<<"hello"<<endl;
	int n;
	cin >> n;
	vector<vector<int>> a = nQueens(n);
	return 0;
}




//A* star - 8 puzzle game

#include <bits/stdc++.h>

using namespace std;
#define n 3

class Node{
    Node* parent;
    int mat[n][n];
    int x;
    int y;
    int level;
    int cost;

    friend class Solution;
};

class Solution{
    public:

    Node* newNode(int mat[n][n], int x, int y, int newX, int newY, int level, Node* child){
        Node* node=new Node;
        node->parent=child;

        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                node->mat[i][j]=mat[i][j]; //copy
            }
        }
        //swap
        swap(node->mat[x][y], node->mat[newX][newY]);
        //initializations
        node->cost=INT_MAX;
        node->level=level;
        node->x=newX;
        node->y=newY;

        return node;
    }

    int calculateCost(int initial[n][n], int final[n][n]){
        int cnt=0;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(initial[i][j] && initial[i][j]!=final[i][j]){
                    cnt++;
                }
            }
        }
        return cnt;
    }

    bool isSafe(int x, int y){
        if(x<0 || y<0 || x>=n || y>=n){
            return false;
        }
        return true;
    }

    void printMatrix(int mat[n][n]){
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                cout<<mat[i][j]<<" ";
            }
            cout<<endl;
        }
    }

    void printPath(Node* root){
        if(root==NULL){
            return;
        }
        printPath(root->parent);
        printMatrix(root->mat);
        cout<<endl;
    }

    struct comp{
        bool operator()(const Node* lhs, const Node* rhs)const{
            return (lhs->cost+lhs->level)>(rhs->cost, rhs->level);
        }
    };

    void solve(int initial[n][n], int x, int y, int final[n][n]){
        int row[]={-1, 0, 1, 0};
        int col[]={0, -1, 0, 1};

        priority_queue<Node*, vector<Node*>, comp> pq; //min heap

        Node* root=newNode(initial, x, y, x, y, 0, NULL);
        root->cost=calculateCost(initial, final);
        pq.push(root);

        while(!pq.empty()){
            Node* min=pq.top();
            pq.pop();

            if(min->cost==0){
                printPath(min);
                return;
            }

            for(int i=0; i<4; i++){
                if(isSafe(min->x+row[i], min->y+col[i])){
                    Node* child=newNode(min->mat, min->x, min->y, min->x+row[i], min->y+col[i], min->level+1, min);
                    child->cost=calculateCost(child->mat, final);
                    pq.push(child);
                }
            }
        }
    }
};


int main(){
    int initial[n][n]={
        {1,2,3},
        {0,4,6},
        {7,5,8}
    };
    int final[n][n]={
        {1,2,3},
        {4,5,6},
        {7,8,0}
    };
    int x=1, y=0;
    Solution s;
    s.solve(initial, x, y, final);
    return 0;
}